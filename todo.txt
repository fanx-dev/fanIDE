WARN/ASK FOR FANTOM+HOME AT FIRST START, if missing show message not exception.

Review FanResolvedType and see if can simplify, seem to be some redundency
See If can split indexer - 1000+ lines

write unit tests for:
- resolving expressions (FanResolvedType)
- parsing files (parsing fantom distro & test) - fix existing one
- indexing: storing/retrieving from the dB diffrent fantom & java types
- completion proposals
.. and more

Then fix arising issues such as unparseable src such as
- sysTest::symbolTest
- sysTest::FuncTest

Profile & find sticking points (scope/ scope var resolutuion could be optimized at least).

============= TODO Completion ===============================

-> Check local slot names against parents to see if all abstract are present, and if all "override" are overriding something and wether the one overriden is virtual
-> warn when parent is Java FFI and there are duplicate slot names (no overload)
- Filter proposals (Don't show innacessible items, private etc...)
- Do it, super(!= in method VS in type), namedSuper, this completion
if super. at type level, ovveride methods (fields?)
- loop/throw variables (for Int i...)
- complete things like 2.times()

Indexing:
	-> also save list of what's being used for quick where-used lookups ?
	-> and for refactor as well
	-> whereused table: Document - usedName - location (line# and/or range ?)

============= TODO semantic checks =====================
Deal with shortcut operators:
http://fantom.org/doc/docLang/Expressions.html#shortcuts

for all check protection: private, internal etc...

Type(class)
-> check name is unique (or marked override)
-> check if all abstract overidden and marked override execpt if type is abstract
-> final cant be subclassed
-> const ????

Type(mixin)
# Mixins cannot declare concrete instance fields
# Mixins cannot declare constructors
# Mixins cannot declare once methods
# const ????

Type(Enum)
# Enums must have private constructors -> check if they are

Fields
-> Check name is unique
-> check value matches type
-> const fields (hard to check) can only be set in constructors and it blocks
-> readonly marked fields
-> in mixin only const/static or abstract fields

Variables:
-> check name unique
-> check was set with := before using =
-> check value matches type if present

static block
-> no 'this'

constructor
-> check constructor chain ('this' or 'super'), check that chained constructor exists
-> same as method (no this)

method
-> 'this' available
-> parameters
-> if static : no super
-> no 'this' in static
-> not using non static slots froma static one
-> check for virtual/abstract/override
-> Fantom supports covariance - which allows an overridden method to narrow the return type of the inherited method:
-> A method declared to return This is a special case of covariance which always returns the type being used

once method
-> meh
    * Must not be declared within a const class
    * Must not be declared within a mixin
    * Must not be a constructor
    * Must not be static
    * Must not be abstract
    * Must return non-Void
    * Must have no parameters

Closure / it blocks
-> it / this
-> check for variable conflict where either it or this is required

========== Currently Being worked on============================================
  - Add sub-menu to build.fan for running actions: doc,clean and others defined in BuildPod.fan (clean, native...)
  - Also have a "custom" option with text entry dialog to run user actions
  - Cleanup hard-coded strings (actions/menus etc...)
  - Change fan_home checks so that it hints to the problem if not executable(fan.exe on windows)
  - Check on this [[http://wiki.netbeans.org/PluginPortalQualityCriteria]] and submit to NB plugin portal.

========= Long term Goals ======================================================

- Semantic analysis
    -step 2: uses/misuses (4) - partialy done
    -step 3: with inheritance ? (5) - prob. need indexer
- Occurence finder (2)
- Rename / Refactor
    -Local: 2
    -Remote: 4
- Go to definition
    -Local:2
    -Remote:3
- Fix imports
    - Fan (3)
    - Java (5)
- Fix proposals
    - Impl missing methods (abstracts/virtual etc..)
    - Create method/class/mixin ...




