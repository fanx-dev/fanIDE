/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package net.colar.netbeans.fan;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.HashMap;

/**
 * Takes the Antlr generated token list,
 * and create a java file from them, containing TokenID's
 * @author thibautc
 */
public class AntlrTokensToNetbeans {

    public static void main(String[] args) throws Exception
    {
	if(args.length<3)
	{
	    System.err.println("Need to pass 3 args:");
	    System.err.println("1: The path to the ANTLR token file");
	    System.err.println("2: The path to the java file to output.");
	    System.err.println("3: The package Name to generate in the java file.");
	    System.err.println("Ex: java AntlTokensToNetbeans fan.tokens src/comp/toto/Tokens.java comp.toto");
	    System.exit(-1);
	}
	String tokenFile=args[0];
	String javaFile=args[1];
	String pack=args[2];

	PrintWriter pw=new PrintWriter(new File(javaFile));
	int index=0;
	if(javaFile.indexOf(File.separator)>0)
	    index=javaFile.lastIndexOf(File.separator);
	String className=javaFile.substring(index+1, javaFile.lastIndexOf(".java"));
	writeHeader(pw,pack,className);
	writeTokens(pw,tokenFile);
	writeTrailer(pw);
	pw.close();
    }

    private static void writeHeader(PrintWriter pw, String pack, String className)
    {
	pw.println("/*Automatically generated by AntlrTokensToNetbeans.java*/\n");
	pw.println("package "+pack+";");
	pw.println("");
	pw.println("import java.util.Hashtable;");
	pw.println("");
	pw.println("public class "+className+"{");
	pw.println("");
	pw.println("private static Hashtable tokens=new Hashtable();");
	pw.println("");
	pw.println("static{ // initializes tokens");
    }

    private static void writeTrailer(PrintWriter pw)
    {
	pw.println("	}");
	pw.println("");
	pw.println("	public static Hashtable getTokens() {return tokens; }");
	pw.println("");
	pw.println("}");
    }

    private static void writeTokens(PrintWriter pw, String tokenFile) throws Exception
    {
	File f=new File(tokenFile);
	HashMap tokens=new HashMap();
	if(f.exists())
	{
	    pw.println("    //Generated from ANTLR tokens: "+tokenFile+"\n");
	    pw.println("    FanTokenID token;\n");
	    BufferedReader br = new BufferedReader(new FileReader(f));
	    String s=null;
	    while((s=br.readLine()) != null)
	    {
		int index=s.lastIndexOf("=");
		if(index>0)
		{
		    Integer id=new Integer(s.substring(index+1));
		    if(! s.startsWith("'"))
		    {
			//Keyword
			String keyword=s.substring(0,index);
			String cat="TBD";
			pw.println("	token=new FanTokenID(\""+keyword+"\", "+id+", \""+cat+"\");");
			pw.println("	tokens.put("+id+",token);");
		    }
		    else
		    {
			// fixed text value
			String text=s.substring(1,index-1);
			pw.println("	token=(FanTokenID)tokens.get("+id+");");
			pw.println("	token.setFixedText(\""+text+"\");");
			pw.println("	tokens.put("+id+", token);");
		    }
		}
	    }
	    br.close();

	}
	else
	{
	    pw.println("    // Missing token file ! : "+f.getAbsolutePath());
	}

    }




}
