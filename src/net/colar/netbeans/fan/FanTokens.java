/*Automatically generated by AntlrTokensToNetbeans.java*/

package net.colar.netbeans.fan;

import java.util.Hashtable;

public class FanTokens{

private static Hashtable<Integer, FanTokenID> tokens=new Hashtable<Integer, FanTokenID>();

static{ // initializes tokens
    //Generated from ANTLR tokens: src/net/colar/netbeans/fan/antlr/Fan.tokens

    FanTokenID token;

	token=new FanTokenID("EXPONENT", 146, "");
	tokens.put(new Integer(146),token);
	token=new FanTokenID("DSL", 110, "");
	tokens.put(new Integer(110),token);
	token=new FanTokenID("KW_NATIVE", 22, "keyword");
	tokens.put(new Integer(22),token);
	token=new FanTokenID("OP_AND", 90, "operator");
	tokens.put(new Integer(90),token);
	token=new FanTokenID("AST_PARAMS", 73, "");
	tokens.put(new Integer(73),token);
	token=new FanTokenID("LETTER", 148, "");
	tokens.put(new Integer(148),token);
	token=new FanTokenID("HEXNB", 141, "");
	tokens.put(new Integer(141),token);
	token=new FanTokenID("CHAR", 115, "character");
	tokens.put(new Integer(115),token);
	token=new FanTokenID("OP_2PLUS", 107, "operator");
	tokens.put(new Integer(107),token);
	token=new FanTokenID("KW_DEFAULT", 14, "keyword");
	tokens.put(new Integer(14),token);
	token=new FanTokenID("KW_ONCE", 37, "keyword");
	tokens.put(new Integer(37),token);
	token=new FanTokenID("SP_SEMI", 86, "separator");
	tokens.put(new Integer(86),token);
	token=new FanTokenID("INC_UNKNOWN_ITEM", 149, "error");
	tokens.put(new Integer(149),token);
	token=new FanTokenID("AST_MIXIN", 54, "");
	tokens.put(new Integer(54),token);
	token=new FanTokenID("KW_PUBLIC", 34, "keyword");
	tokens.put(new Integer(34),token);
	token=new FanTokenID("KW_ISNOT", 42, "keyword");
	tokens.put(new Integer(42),token);
	token=new FanTokenID("OP_MOD", 105, "operator");
	tokens.put(new Integer(105),token);
	token=new FanTokenID("PAR_R", 125, "");
	tokens.put(new Integer(125),token);
	token=new FanTokenID("OP_MINUS", 102, "operator");
	tokens.put(new Integer(102),token);
	token=new FanTokenID("KW_NEW", 36, "keyword");
	tokens.put(new Integer(36),token);
	token=new FanTokenID("KW_BREAK", 4, "keyword");
	tokens.put(new Integer(4),token);
	token=new FanTokenID("KW_SWITCH", 9, "keyword");
	tokens.put(new Integer(9),token);
	token=new FanTokenID("AST_INC_DOTCALL", 68, "");
	tokens.put(new Integer(68),token);
	token=new FanTokenID("OP_RANG_EXCL_OLD", 94, "operator");
	tokens.put(new Integer(94),token);
	token=new FanTokenID("AST_CLASS", 52, "");
	tokens.put(new Integer(52),token);
	token=new FanTokenID("OP_BITOR", 97, "operator");
	tokens.put(new Integer(97),token);
	token=new FanTokenID("QUOTSTR", 116, "string");
	tokens.put(new Integer(116),token);
	token=new FanTokenID("AST_TYPE", 74, "");
	tokens.put(new Integer(74),token);
	token=new FanTokenID("OP_BANG", 106, "operator");
	tokens.put(new Integer(106),token);
	token=new FanTokenID("AST_DOT_CALL", 64, "");
	tokens.put(new Integer(64),token);
	token=new FanTokenID("T__150", 150, "");
	tokens.put(new Integer(150),token);
	token=new FanTokenID("PAR_L", 124, "");
	tokens.put(new Integer(124),token);
	token=new FanTokenID("OP_MULTI", 103, "operator");
	tokens.put(new Integer(103),token);
	token=new FanTokenID("AST_USING_POD", 67, "");
	tokens.put(new Integer(67),token);
	token=new FanTokenID("KEYWORD", 138, "");
	tokens.put(new Integer(138),token);
	token=new FanTokenID("KW_PROTECTED", 33, "keyword");
	tokens.put(new Integer(33),token);
	token=new FanTokenID("AST_STR", 61, "");
	tokens.put(new Integer(61),token);
	token=new FanTokenID("LINE_COMMENT", 128, "comment");
	tokens.put(new Integer(128),token);
	token=new FanTokenID("CP_COMPARATORS", 92, "comparator");
	tokens.put(new Integer(92),token);
	token=new FanTokenID("NUMBER", 121, "number");
	tokens.put(new Integer(121),token);
	token=new FanTokenID("KW_CATCH", 15, "keyword");
	tokens.put(new Integer(15),token);
	token=new FanTokenID("AS_EQUAL", 87, "assignment");
	tokens.put(new Integer(87),token);
	token=new FanTokenID("UNDERSCORE", 139, "");
	tokens.put(new Integer(139),token);
	token=new FanTokenID("INC_CALL", 51, "error");
	tokens.put(new Integer(51),token);
	token=new FanTokenID("OP_DIV", 104, "operator");
	tokens.put(new Integer(104),token);
	token=new FanTokenID("SP_COMMA", 81, "separator");
	tokens.put(new Integer(81),token);
	token=new FanTokenID("URI", 114, "string");
	tokens.put(new Integer(114),token);
	token=new FanTokenID("KW_FINALLY", 16, "keyword");
	tokens.put(new Integer(16),token);
	token=new FanTokenID("WS", 127, "");
	tokens.put(new Integer(127),token);
	token=new FanTokenID("KW_THROW", 10, "keyword");
	tokens.put(new Integer(10),token);
	token=new FanTokenID("OP_POUND", 118, "operator");
	tokens.put(new Integer(118),token);
	token=new FanTokenID("KW_STATIC", 21, "keyword");
	tokens.put(new Integer(21),token);
	token=new FanTokenID("INC_COMMENT", 49, "error");
	tokens.put(new Integer(49),token);
	token=new FanTokenID("AST_METHOD", 55, "");
	tokens.put(new Integer(55),token);
	token=new FanTokenID("AST_ENUM", 53, "");
	tokens.put(new Integer(53),token);
	token=new FanTokenID("AST_CALL", 62, "");
	tokens.put(new Integer(62),token);
	token=new FanTokenID("SP_QMARK", 82, "separator");
	tokens.put(new Integer(82),token);
	token=new FanTokenID("AST_ID", 70, "");
	tokens.put(new Integer(70),token);
	token=new FanTokenID("HEXHEADER", 144, "");
	tokens.put(new Integer(144),token);
	token=new FanTokenID("AS_INIT_VAL", 79, "assignment");
	tokens.put(new Integer(79),token);
	token=new FanTokenID("COMPL_DSL", 132, "");
	tokens.put(new Integer(132),token);
	token=new FanTokenID("NBTYPE", 147, "");
	tokens.put(new Integer(147),token);
	token=new FanTokenID("KW_SUPER", 39, "keyword");
	tokens.put(new Integer(39),token);
	token=new FanTokenID("OP_2MINUS", 108, "operator");
	tokens.put(new Integer(108),token);
	token=new FanTokenID("OP_RSHIFT", 100, "operator");
	tokens.put(new Integer(100),token);
	token=new FanTokenID("KW_ELSE", 40, "keyword");
	tokens.put(new Integer(40),token);
	token=new FanTokenID("OP_OR", 89, "operator");
	tokens.put(new Integer(89),token);
	token=new FanTokenID("AST_MODIFIER", 71, "");
	tokens.put(new Integer(71),token);
	token=new FanTokenID("DOC", 120, "");
	tokens.put(new Integer(120),token);
	token=new FanTokenID("KW_OVERRIDE", 24, "keyword");
	tokens.put(new Integer(24),token);
	token=new FanTokenID("AST_FIELD", 57, "");
	tokens.put(new Integer(57),token);
	token=new FanTokenID("AST_CODE_BLOCK", 59, "");
	tokens.put(new Integer(59),token);
	token=new FanTokenID("KW_ABSTRACT", 31, "keyword");
	tokens.put(new Integer(31),token);
	token=new FanTokenID("MULTI_COMMENT", 131, "comment");
	tokens.put(new Integer(131),token);
	token=new FanTokenID("KW_CONST", 20, "keyword");
	tokens.put(new Integer(20),token);
	token=new FanTokenID("AST_DOCS", 60, "");
	tokens.put(new Integer(60),token);
	token=new FanTokenID("COMPL_ML_COMMENT", 130, "");
	tokens.put(new Integer(130),token);
	token=new FanTokenID("OP_ELVIS", 93, "operator");
	tokens.put(new Integer(93),token);
	token=new FanTokenID("BRACKET_R", 78, "");
	tokens.put(new Integer(78),token);
	token=new FanTokenID("KW_TRUE", 45, "keyword");
	tokens.put(new Integer(45),token);
	token=new FanTokenID("ID", 113, "");
	tokens.put(new Integer(113),token);
	token=new FanTokenID("SP_COLON", 80, "separator");
	tokens.put(new Integer(80),token);
	token=new FanTokenID("AST_CONSTRUCTOR_CHAIN", 58, "");
	tokens.put(new Integer(58),token);
	token=new FanTokenID("AST_TERM_EXPR", 63, "");
	tokens.put(new Integer(63),token);
	token=new FanTokenID("BRACKET_L", 77, "");
	tokens.put(new Integer(77),token);
	token=new FanTokenID("AT", 119, "");
	tokens.put(new Integer(119),token);
	token=new FanTokenID("STR", 117, "string");
	tokens.put(new Integer(117),token);
	token=new FanTokenID("OP_RANGE_EXCL", 95, "operator");
	tokens.put(new Integer(95),token);
	token=new FanTokenID("SP_PIPE", 84, "separator");
	tokens.put(new Integer(84),token);
	token=new FanTokenID("COMPL_QSTR", 135, "");
	tokens.put(new Integer(135),token);
	token=new FanTokenID("OP_TILDA", 109, "operator");
	tokens.put(new Integer(109),token);
	token=new FanTokenID("KW_VIRTUAL", 25, "keyword");
	tokens.put(new Integer(25),token);
	token=new FanTokenID("CP_EQUALITY", 91, "comparator");
	tokens.put(new Integer(91),token);
	token=new FanTokenID("AST_SAFE_DOT_CALL", 65, "");
	tokens.put(new Integer(65),token);
	token=new FanTokenID("KW_FOR", 6, "keyword");
	tokens.put(new Integer(6),token);
	token=new FanTokenID("KW_WHILE", 11, "keyword");
	tokens.put(new Integer(11),token);
	token=new FanTokenID("COMPL_URI", 137, "");
	tokens.put(new Integer(137),token);
	token=new FanTokenID("OP_RANGE", 96, "operator");
	tokens.put(new Integer(96),token);
	token=new FanTokenID("KW_RETURN", 8, "keyword");
	tokens.put(new Integer(8),token);
	token=new FanTokenID("INC_DSL", 50, "error");
	tokens.put(new Integer(50),token);
	token=new FanTokenID("SQ_BRACKET_R", 123, "");
	tokens.put(new Integer(123),token);
	token=new FanTokenID("KW_IS", 41, "keyword");
	tokens.put(new Integer(41),token);
	token=new FanTokenID("DIGIT", 133, "");
	tokens.put(new Integer(133),token);
	token=new FanTokenID("KW_TRY", 12, "keyword");
	tokens.put(new Integer(12),token);
	token=new FanTokenID("KW_IT", 44, "keyword");
	tokens.put(new Integer(44),token);
	token=new FanTokenID("DOT", 76, "");
	tokens.put(new Integer(76),token);
	token=new FanTokenID("KW_THIS", 38, "keyword");
	tokens.put(new Integer(38),token);
	token=new FanTokenID("KW_IF", 7, "keyword");
	tokens.put(new Integer(7),token);
	token=new FanTokenID("OP_CURRY", 98, "operator");
	tokens.put(new Integer(98),token);
	token=new FanTokenID("SQ_BRACKET_L", 122, "");
	tokens.put(new Integer(122),token);
	token=new FanTokenID("AST_INC_SAFEDOTCALL", 69, "");
	tokens.put(new Integer(69),token);
	token=new FanTokenID("OP_PLUS", 101, "operator");
	tokens.put(new Integer(101),token);
	token=new FanTokenID("KW_FALSE", 46, "keyword");
	tokens.put(new Integer(46),token);
	token=new FanTokenID("KW_INTERNAL", 35, "keyword");
	tokens.put(new Integer(35),token);
	token=new FanTokenID("KW_FINAL", 26, "keyword");
	tokens.put(new Integer(26),token);
	token=new FanTokenID("HEXLETTER", 134, "");
	tokens.put(new Integer(134),token);
	token=new FanTokenID("KW_CONTINUE", 5, "keyword");
	tokens.put(new Integer(5),token);
	token=new FanTokenID("KW_PRIVATE", 32, "keyword");
	tokens.put(new Integer(32),token);
	token=new FanTokenID("KW_ENUM", 29, "keyword");
	tokens.put(new Integer(29),token);
	token=new FanTokenID("HEX_HEADER", 140, "");
	tokens.put(new Integer(140),token);
	token=new FanTokenID("OP_SAFEDYN_CALL", 112, "operator");
	tokens.put(new Integer(112),token);
	token=new FanTokenID("KW_VOLATILE", 23, "keyword");
	tokens.put(new Integer(23),token);
	token=new FanTokenID("KW_CASE", 13, "keyword");
	tokens.put(new Integer(13),token);
	token=new FanTokenID("LIST_TYPE", 83, "");
	tokens.put(new Integer(83),token);
	token=new FanTokenID("FRACTIONAL", 143, "");
	tokens.put(new Integer(143),token);
	token=new FanTokenID("OP_LSHIFT", 99, "operator");
	tokens.put(new Integer(99),token);
	token=new FanTokenID("EXEC_COMMENT", 129, "comment");
	tokens.put(new Integer(129),token);
	token=new FanTokenID("KW_MIXIN", 30, "keyword");
	tokens.put(new Integer(30),token);
	token=new FanTokenID("OP_ARROW", 85, "operator");
	tokens.put(new Integer(85),token);
	token=new FanTokenID("KW_VOID", 27, "keyword");
	tokens.put(new Integer(27),token);
	token=new FanTokenID("DECIMAL", 142, "");
	tokens.put(new Integer(142),token);
	token=new FanTokenID("INC_URI", 48, "error");
	tokens.put(new Integer(48),token);
	token=new FanTokenID("KW_CLASS", 28, "keyword");
	tokens.put(new Integer(28),token);
	token=new FanTokenID("AS_ASSIGN_OP", 88, "assignment");
	tokens.put(new Integer(88),token);
	token=new FanTokenID("AST_CONSTRUCTOR", 56, "");
	tokens.put(new Integer(56),token);
	token=new FanTokenID("KW_RD_ONLY", 19, "keyword");
	tokens.put(new Integer(19),token);
	token=new FanTokenID("INC_STR", 47, "error");
	tokens.put(new Integer(47),token);
	token=new FanTokenID("AST_STATIC_CALL", 66, "");
	tokens.put(new Integer(66),token);
	token=new FanTokenID("OP_SAFE_CALL", 111, "operator");
	tokens.put(new Integer(111),token);
	token=new FanTokenID("KW_AS", 18, "keyword");
	tokens.put(new Integer(18),token);
	token=new FanTokenID("COMPL_STR", 136, "");
	tokens.put(new Integer(136),token);
	token=new FanTokenID("LB", 126, "");
	tokens.put(new Integer(126),token);
	token=new FanTokenID("KW_USING", 17, "keyword");
	tokens.put(new Integer(17),token);
	token=new FanTokenID("KW_NULL", 43, "keyword");
	tokens.put(new Integer(43),token);
	token=new FanTokenID("FRACTION", 145, "");
	tokens.put(new Integer(145),token);
	token=new FanTokenID("AST_INHERITANCE", 72, "");
	tokens.put(new Integer(72),token);
	token=new FanTokenID("SP_COLCOL", 75, "separator");
	tokens.put(new Integer(75),token);
	token=tokens.get(new Integer(29));
	token.setFixedText("enum");
	tokens.put(new Integer(29), token);
	token=tokens.get(new Integer(16));
	token.setFixedText("finally");
	tokens.put(new Integer(16), token);
	token=tokens.get(new Integer(37));
	token.setFixedText("once");
	tokens.put(new Integer(37), token);
	token=tokens.get(new Integer(35));
	token.setFixedText("internal");
	tokens.put(new Integer(35), token);
	token=tokens.get(new Integer(28));
	token.setFixedText("class");
	tokens.put(new Integer(28), token);
	token=tokens.get(new Integer(36));
	token.setFixedText("new");
	tokens.put(new Integer(36), token);
	token=tokens.get(new Integer(9));
	token.setFixedText("switch");
	tokens.put(new Integer(9), token);
	token=tokens.get(new Integer(43));
	token.setFixedText("null");
	tokens.put(new Integer(43), token);
	token=tokens.get(new Integer(20));
	token.setFixedText("const");
	tokens.put(new Integer(20), token);
	token=tokens.get(new Integer(38));
	token.setFixedText("this");
	tokens.put(new Integer(38), token);
	token=tokens.get(new Integer(10));
	token.setFixedText("throw ");
	tokens.put(new Integer(10), token);
	token=tokens.get(new Integer(23));
	token.setFixedText("volatile");
	tokens.put(new Integer(23), token);
	token=tokens.get(new Integer(8));
	token.setFixedText("return");
	tokens.put(new Integer(8), token);
	token=tokens.get(new Integer(33));
	token.setFixedText("protected");
	tokens.put(new Integer(33), token);
	token=tokens.get(new Integer(6));
	token.setFixedText("for");
	tokens.put(new Integer(6), token);
	token=tokens.get(new Integer(42));
	token.setFixedText("isnot");
	tokens.put(new Integer(42), token);
	token=tokens.get(new Integer(25));
	token.setFixedText("virtual");
	tokens.put(new Integer(25), token);
	token=tokens.get(new Integer(41));
	token.setFixedText("is");
	tokens.put(new Integer(41), token);
	token=tokens.get(new Integer(83));
	token.setFixedText("[]");
	tokens.put(new Integer(83), token);
	token=tokens.get(new Integer(39));
	token.setFixedText("super");
	tokens.put(new Integer(39), token);
	token=tokens.get(new Integer(150));
	token.setFixedText("$");
	tokens.put(new Integer(150), token);
	token=tokens.get(new Integer(13));
	token.setFixedText("case");
	tokens.put(new Integer(13), token);
	token=tokens.get(new Integer(21));
	token.setFixedText("static");
	tokens.put(new Integer(21), token);
	token=tokens.get(new Integer(45));
	token.setFixedText("true");
	tokens.put(new Integer(45), token);
	token=tokens.get(new Integer(40));
	token.setFixedText("else");
	tokens.put(new Integer(40), token);
	token=tokens.get(new Integer(15));
	token.setFixedText("catch");
	tokens.put(new Integer(15), token);
	token=tokens.get(new Integer(31));
	token.setFixedText("abstract");
	tokens.put(new Integer(31), token);
	token=tokens.get(new Integer(26));
	token.setFixedText("final");
	tokens.put(new Integer(26), token);
	token=tokens.get(new Integer(24));
	token.setFixedText("override");
	tokens.put(new Integer(24), token);
	token=tokens.get(new Integer(22));
	token.setFixedText("native");
	tokens.put(new Integer(22), token);
	token=tokens.get(new Integer(4));
	token.setFixedText("break");
	tokens.put(new Integer(4), token);
	token=tokens.get(new Integer(19));
	token.setFixedText("readonly");
	tokens.put(new Integer(19), token);
	token=tokens.get(new Integer(18));
	token.setFixedText("as");
	tokens.put(new Integer(18), token);
	token=tokens.get(new Integer(27));
	token.setFixedText("void");
	tokens.put(new Integer(27), token);
	token=tokens.get(new Integer(12));
	token.setFixedText("try");
	tokens.put(new Integer(12), token);
	token=tokens.get(new Integer(32));
	token.setFixedText("private");
	tokens.put(new Integer(32), token);
	token=tokens.get(new Integer(46));
	token.setFixedText("false");
	tokens.put(new Integer(46), token);
	token=tokens.get(new Integer(30));
	token.setFixedText("mixin");
	tokens.put(new Integer(30), token);
	token=tokens.get(new Integer(5));
	token.setFixedText("continue");
	tokens.put(new Integer(5), token);
	token=tokens.get(new Integer(7));
	token.setFixedText("if");
	tokens.put(new Integer(7), token);
	token=tokens.get(new Integer(44));
	token.setFixedText("it");
	tokens.put(new Integer(44), token);
	token=tokens.get(new Integer(11));
	token.setFixedText("while");
	tokens.put(new Integer(11), token);
	token=tokens.get(new Integer(34));
	token.setFixedText("public");
	tokens.put(new Integer(34), token);
	token=tokens.get(new Integer(14));
	token.setFixedText("default");
	tokens.put(new Integer(14), token);
	token=tokens.get(new Integer(17));
	token.setFixedText("using");
	tokens.put(new Integer(17), token);
	}

	public static Hashtable<Integer, FanTokenID> getTokens() {return tokens; }

}
