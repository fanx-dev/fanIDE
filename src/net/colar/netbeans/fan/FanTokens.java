/*Automatically generated by AntlrTokensToNetbeans.java*/

package net.colar.netbeans.fan;

import java.util.Hashtable;

public class FanTokens{

private static Hashtable tokens=new Hashtable();

static{ // initializes tokens
    //Generated from ANTLR tokens: src/net/colar/netbeans/fan/antlr/Fan.tokens

    FanTokenID token;

	token=new FanTokenID("HEX_HEADER", 107, "TBD");
	tokens.put(107,token);
	token=new FanTokenID("AS_INIT_VAL", 61, "TBD");
	tokens.put(61,token);
	token=new FanTokenID("OP_MULTI", 79, "TBD");
	tokens.put(79,token);
	token=new FanTokenID("NUMBER", 97, "TBD");
	tokens.put(97,token);
	token=new FanTokenID("QUOTSTR", 91, "TBD");
	tokens.put(91,token);
	token=new FanTokenID("KW_DEFAULT", 14, "TBD");
	tokens.put(14,token);
	token=new FanTokenID("OP_ELVIS", 69, "TBD");
	tokens.put(69,token);
	token=new FanTokenID("OP_2MINUS", 84, "TBD");
	tokens.put(84,token);
	token=new FanTokenID("FRACTION", 112, "TBD");
	tokens.put(112,token);
	token=new FanTokenID("OP_MOD", 81, "TBD");
	tokens.put(81,token);
	token=new FanTokenID("KW_NULL", 43, "TBD");
	tokens.put(43,token);
	token=new FanTokenID("KW_ISNOT", 42, "TBD");
	tokens.put(42,token);
	token=new FanTokenID("KW_BREAK", 4, "TBD");
	tokens.put(4,token);
	token=new FanTokenID("OP_LSHIFT", 75, "TBD");
	tokens.put(75,token);
	token=new FanTokenID("DOT", 48, "TBD");
	tokens.put(48,token);
	token=new FanTokenID("CP_COMPARATORS", 68, "TBD");
	tokens.put(68,token);
	token=new FanTokenID("PAR_R", 56, "TBD");
	tokens.put(56,token);
	token=new FanTokenID("OP_BITOR", 73, "TBD");
	tokens.put(73,token);
	token=new FanTokenID("KW_ENUM", 29, "TBD");
	tokens.put(29,token);
	token=new FanTokenID("OP_ARROW", 60, "TBD");
	tokens.put(60,token);
	token=new FanTokenID("OP_TILDA", 85, "TBD");
	tokens.put(85,token);
	token=new FanTokenID("EXEC_COMMENT", 101, "TBD");
	tokens.put(101,token);
	token=new FanTokenID("KW_CONST", 20, "TBD");
	tokens.put(20,token);
	token=new FanTokenID("HEXNB", 108, "TBD");
	tokens.put(108,token);
	token=new FanTokenID("OP_BANG", 82, "TBD");
	tokens.put(82,token);
	token=new FanTokenID("AT", 89, "TBD");
	tokens.put(89,token);
	token=new FanTokenID("LIST_TYPE", 58, "TBD");
	tokens.put(58,token);
	token=new FanTokenID("OP_SAFE_CALL", 87, "TBD");
	tokens.put(87,token);
	token=new FanTokenID("KW_VOLATILE", 23, "TBD");
	tokens.put(23,token);
	token=new FanTokenID("OP_DIV", 80, "TBD");
	tokens.put(80,token);
	token=new FanTokenID("DSL", 86, "TBD");
	tokens.put(86,token);
	token=new FanTokenID("WS", 99, "TBD");
	tokens.put(99,token);
	token=new FanTokenID("CHAR", 94, "TBD");
	tokens.put(94,token);
	token=new FanTokenID("KW_RETURN", 8, "TBD");
	tokens.put(8,token);
	token=new FanTokenID("OP_RANGE", 72, "TBD");
	tokens.put(72,token);
	token=new FanTokenID("SP_SEMI", 62, "TBD");
	tokens.put(62,token);
	token=new FanTokenID("OP_SAFEDYN_CALL", 88, "TBD");
	tokens.put(88,token);
	token=new FanTokenID("SP_COLON", 53, "TBD");
	tokens.put(53,token);
	token=new FanTokenID("SP_COMMA", 54, "TBD");
	tokens.put(54,token);
	token=new FanTokenID("KW_PRIVATE", 32, "TBD");
	tokens.put(32,token);
	token=new FanTokenID("OP_POUND", 95, "TBD");
	tokens.put(95,token);
	token=new FanTokenID("LINE_COMMENT", 100, "TBD");
	tokens.put(100,token);
	token=new FanTokenID("KW_OVERRIDE", 24, "TBD");
	tokens.put(24,token);
	token=new FanTokenID("KW_IS", 41, "TBD");
	tokens.put(41,token);
	token=new FanTokenID("HEXLETTER", 104, "TBD");
	tokens.put(104,token);
	token=new FanTokenID("KW_THROW", 10, "TBD");
	tokens.put(10,token);
	token=new FanTokenID("KW_PUBLIC", 34, "TBD");
	tokens.put(34,token);
	token=new FanTokenID("KW_ABSTRACT", 31, "TBD");
	tokens.put(31,token);
	token=new FanTokenID("OP_RANGE_EXCL", 71, "TBD");
	tokens.put(71,token);
	token=new FanTokenID("KW_INTERNAL", 35, "TBD");
	tokens.put(35,token);
	token=new FanTokenID("OP_MINUS", 78, "TBD");
	tokens.put(78,token);
	token=new FanTokenID("LB", 98, "TBD");
	tokens.put(98,token);
	token=new FanTokenID("OP_CURRY", 74, "TBD");
	tokens.put(74,token);
	token=new FanTokenID("KW_TRY", 12, "TBD");
	tokens.put(12,token);
	token=new FanTokenID("FRACTIONAL", 110, "TBD");
	tokens.put(110,token);
	token=new FanTokenID("KW_CLASS", 28, "TBD");
	tokens.put(28,token);
	token=new FanTokenID("HEXHEADER", 111, "TBD");
	tokens.put(111,token);
	token=new FanTokenID("UNDERSCORE", 106, "TBD");
	tokens.put(106,token);
	token=new FanTokenID("KW_SWITCH", 9, "TBD");
	tokens.put(9,token);
	token=new FanTokenID("KW_VOID", 27, "TBD");
	tokens.put(27,token);
	token=new FanTokenID("SP_QMARK", 57, "TBD");
	tokens.put(57,token);
	token=new FanTokenID("SP_PIPE", 59, "TBD");
	tokens.put(59,token);
	token=new FanTokenID("NBTYPE", 114, "TBD");
	tokens.put(114,token);
	token=new FanTokenID("KW_USING", 17, "TBD");
	tokens.put(17,token);
	token=new FanTokenID("KW_FALSE", 46, "TBD");
	tokens.put(46,token);
	token=new FanTokenID("KW_FOR", 6, "TBD");
	tokens.put(6,token);
	token=new FanTokenID("SQ_BRACKET_L", 49, "TBD");
	tokens.put(49,token);
	token=new FanTokenID("KW_IT", 44, "TBD");
	tokens.put(44,token);
	token=new FanTokenID("KW_FINAL", 26, "TBD");
	tokens.put(26,token);
	token=new FanTokenID("DOC", 96, "TBD");
	tokens.put(96,token);
	token=new FanTokenID("KW_VIRTUAL", 25, "TBD");
	tokens.put(25,token);
	token=new FanTokenID("KW_TRUE", 45, "TBD");
	tokens.put(45,token);
	token=new FanTokenID("DECIMAL", 109, "TBD");
	tokens.put(109,token);
	token=new FanTokenID("URI", 93, "TBD");
	tokens.put(93,token);
	token=new FanTokenID("KW_THIS", 38, "TBD");
	tokens.put(38,token);
	token=new FanTokenID("PAR_L", 55, "TBD");
	tokens.put(55,token);
	token=new FanTokenID("OP_OR", 65, "TBD");
	tokens.put(65,token);
	token=new FanTokenID("OP_PLUS", 77, "TBD");
	tokens.put(77,token);
	token=new FanTokenID("KW_CASE", 13, "TBD");
	tokens.put(13,token);
	token=new FanTokenID("KW_ELSE", 40, "TBD");
	tokens.put(40,token);
	token=new FanTokenID("BRACKET_L", 51, "TBD");
	tokens.put(51,token);
	token=new FanTokenID("KW_CONTINUE", 5, "TBD");
	tokens.put(5,token);
	token=new FanTokenID("OP_RSHIFT", 76, "TBD");
	tokens.put(76,token);
	token=new FanTokenID("DIGIT", 103, "TBD");
	tokens.put(103,token);
	token=new FanTokenID("KW_MIXIN", 30, "TBD");
	tokens.put(30,token);
	token=new FanTokenID("KW_FINALLY", 16, "TBD");
	tokens.put(16,token);
	token=new FanTokenID("ID", 90, "TBD");
	tokens.put(90,token);
	token=new FanTokenID("LETTER", 115, "TBD");
	tokens.put(115,token);
	token=new FanTokenID("AS_EQUAL", 63, "TBD");
	tokens.put(63,token);
	token=new FanTokenID("KEYWORD", 105, "TBD");
	tokens.put(105,token);
	token=new FanTokenID("KW_NEW", 36, "TBD");
	tokens.put(36,token);
	token=new FanTokenID("KW_STATIC", 21, "TBD");
	tokens.put(21,token);
	token=new FanTokenID("KW_RD_ONLY", 19, "TBD");
	tokens.put(19,token);
	token=new FanTokenID("KW_AS", 18, "TBD");
	tokens.put(18,token);
	token=new FanTokenID("AS_ASSIGN_OP", 64, "TBD");
	tokens.put(64,token);
	token=new FanTokenID("MULTI_COMMENT", 102, "TBD");
	tokens.put(102,token);
	token=new FanTokenID("STR", 92, "TBD");
	tokens.put(92,token);
	token=new FanTokenID("BRACKET_R", 52, "TBD");
	tokens.put(52,token);
	token=new FanTokenID("KW_SUPER", 39, "TBD");
	tokens.put(39,token);
	token=new FanTokenID("OP_AND", 66, "TBD");
	tokens.put(66,token);
	token=new FanTokenID("KW_CATCH", 15, "TBD");
	tokens.put(15,token);
	token=new FanTokenID("KW_ONCE", 37, "TBD");
	tokens.put(37,token);
	token=new FanTokenID("KW_WHILE", 11, "TBD");
	tokens.put(11,token);
	token=new FanTokenID("KW_PROTECTED", 33, "TBD");
	tokens.put(33,token);
	token=new FanTokenID("EXPONENT", 113, "TBD");
	tokens.put(113,token);
	token=new FanTokenID("SP_COLCOL", 47, "TBD");
	tokens.put(47,token);
	token=new FanTokenID("OP_2PLUS", 83, "TBD");
	tokens.put(83,token);
	token=new FanTokenID("SQ_BRACKET_R", 50, "TBD");
	tokens.put(50,token);
	token=new FanTokenID("CP_EQUALITY", 67, "TBD");
	tokens.put(67,token);
	token=new FanTokenID("OP_RANG_EXCL_OLD", 70, "TBD");
	tokens.put(70,token);
	token=new FanTokenID("KW_IF", 7, "TBD");
	tokens.put(7,token);
	token=new FanTokenID("KW_NATIVE", 22, "TBD");
	tokens.put(22,token);
	token=(FanTokenID)tokens.get(16);
	token.setFixedText("finally");
	tokens.put(16, token);
	token=(FanTokenID)tokens.get(4);
	token.setFixedText("break");
	tokens.put(4, token);
	token=(FanTokenID)tokens.get(19);
	token.setFixedText("readonly");
	tokens.put(19, token);
	token=(FanTokenID)tokens.get(13);
	token.setFixedText("case");
	tokens.put(13, token);
	token=(FanTokenID)tokens.get(42);
	token.setFixedText("isnot");
	tokens.put(42, token);
	token=(FanTokenID)tokens.get(12);
	token.setFixedText("try");
	tokens.put(12, token);
	token=(FanTokenID)tokens.get(24);
	token.setFixedText("override");
	tokens.put(24, token);
	token=(FanTokenID)tokens.get(40);
	token.setFixedText("else");
	tokens.put(40, token);
	token=(FanTokenID)tokens.get(26);
	token.setFixedText("final");
	tokens.put(26, token);
	token=(FanTokenID)tokens.get(45);
	token.setFixedText("true");
	tokens.put(45, token);
	token=(FanTokenID)tokens.get(14);
	token.setFixedText("default");
	tokens.put(14, token);
	token=(FanTokenID)tokens.get(46);
	token.setFixedText("false");
	tokens.put(46, token);
	token=(FanTokenID)tokens.get(44);
	token.setFixedText("it");
	tokens.put(44, token);
	token=(FanTokenID)tokens.get(35);
	token.setFixedText("internal");
	tokens.put(35, token);
	token=(FanTokenID)tokens.get(38);
	token.setFixedText("this");
	tokens.put(38, token);
	token=(FanTokenID)tokens.get(30);
	token.setFixedText("mixin");
	tokens.put(30, token);
	token=(FanTokenID)tokens.get(11);
	token.setFixedText("while");
	tokens.put(11, token);
	token=(FanTokenID)tokens.get(5);
	token.setFixedText("continue");
	tokens.put(5, token);
	token=(FanTokenID)tokens.get(20);
	token.setFixedText("const");
	tokens.put(20, token);
	token=(FanTokenID)tokens.get(58);
	token.setFixedText("[]");
	tokens.put(58, token);
	token=(FanTokenID)tokens.get(17);
	token.setFixedText("using");
	tokens.put(17, token);
	token=(FanTokenID)tokens.get(10);
	token.setFixedText("throw ");
	tokens.put(10, token);
	token=(FanTokenID)tokens.get(23);
	token.setFixedText("volatile");
	tokens.put(23, token);
	token=(FanTokenID)tokens.get(25);
	token.setFixedText("virtual");
	tokens.put(25, token);
	token=(FanTokenID)tokens.get(32);
	token.setFixedText("private");
	tokens.put(32, token);
	token=(FanTokenID)tokens.get(29);
	token.setFixedText("enum");
	tokens.put(29, token);
	token=(FanTokenID)tokens.get(8);
	token.setFixedText("return");
	tokens.put(8, token);
	token=(FanTokenID)tokens.get(39);
	token.setFixedText("super");
	tokens.put(39, token);
	token=(FanTokenID)tokens.get(21);
	token.setFixedText("static");
	tokens.put(21, token);
	token=(FanTokenID)tokens.get(22);
	token.setFixedText("native");
	tokens.put(22, token);
	token=(FanTokenID)tokens.get(33);
	token.setFixedText("protected");
	tokens.put(33, token);
	token=(FanTokenID)tokens.get(7);
	token.setFixedText("if");
	tokens.put(7, token);
	token=(FanTokenID)tokens.get(27);
	token.setFixedText("void");
	tokens.put(27, token);
	token=(FanTokenID)tokens.get(41);
	token.setFixedText("is");
	tokens.put(41, token);
	token=(FanTokenID)tokens.get(9);
	token.setFixedText("switch");
	tokens.put(9, token);
	token=(FanTokenID)tokens.get(15);
	token.setFixedText("catch");
	tokens.put(15, token);
	token=(FanTokenID)tokens.get(18);
	token.setFixedText("as");
	tokens.put(18, token);
	token=(FanTokenID)tokens.get(36);
	token.setFixedText("new");
	tokens.put(36, token);
	token=(FanTokenID)tokens.get(6);
	token.setFixedText("for");
	tokens.put(6, token);
	token=(FanTokenID)tokens.get(37);
	token.setFixedText("once");
	tokens.put(37, token);
	token=(FanTokenID)tokens.get(28);
	token.setFixedText("class");
	tokens.put(28, token);
	token=(FanTokenID)tokens.get(43);
	token.setFixedText("null");
	tokens.put(43, token);
	token=(FanTokenID)tokens.get(34);
	token.setFixedText("public");
	tokens.put(34, token);
	token=(FanTokenID)tokens.get(31);
	token.setFixedText("abstract");
	tokens.put(31, token);
	}

	public static Hashtable getTokens() {return tokens; }

}
