/*
Example
*/
(lights, dates, threshold: 2h) => do

  // get periods when lights are on
  on: hisRead(lights, dates).hisFindPeriods(v => v)

  // get unoccupied periods
  occupied: toOccupied(lights).hisRead(dates).hisFindPeriods(v => not v)

  // compute intersection and filter out periods under threshold
  faults: hisPeriodIntersection([on, occupied]).hisFindAll(p => p > threshold)

  // compute total hours on during unoccupied times
  totalDur: faults.foldCol("v0", sum)

  // lookup costPerHour const on lights rec
  cost: lights->costPerHour * totalDur.as(1)

  // add cost to the spark as another tag
  faults.addMeta({spark_cost: cost})
end