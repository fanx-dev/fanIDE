/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.colar.netbeans.fan.wizard;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;

public final class NewFileVisualPanel1 extends JPanel
{

	private NewFileWizardPanel1 parentWizard;
	private JFileChooser chooser;

	/** Creates new form NewFileVisualPanel1 */
	public NewFileVisualPanel1(NewFileWizardPanel1 parent, String dir)
	{
		super();
		this.parentWizard = parent;
		initComponents();
		nameField.setText("");
		folderField.setText(dir);
		String loc = dir + (dir.endsWith(File.separator) ? "" : File.separator);
		fileField.setText(loc);
		chooser = new JFileChooser();
		chooser.setMultiSelectionEnabled(false);
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		chooser.setApproveButtonText("Select");
	}

	@Override
	public String getName()
	{
		return "Step #1";
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        folderLabel = new javax.swing.JLabel();
        folderField = new javax.swing.JTextField();
        fileField = new javax.swing.JTextField();
        fileLabel = new javax.swing.JLabel();
        customLabel = new javax.swing.JLabel();
        customCombo = new javax.swing.JComboBox();
        browseButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        extField = new javax.swing.JTextField();

        nameField.setText(org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.nameField.text")); // NOI18N
        nameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameFieldKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.nameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(folderLabel, org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.folderLabel.text")); // NOI18N

        folderField.setText(org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.folderField.text")); // NOI18N
        folderField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                folderFieldKeyReleased(evt);
            }
        });

        fileField.setEditable(false);
        fileField.setText(org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.fileField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileLabel, org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.fileLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(customLabel, org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.customLabel.text")); // NOI18N

        customCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Add Empty Class", "Add Class with main method", "Add Mixin", "Add Enum", "Leave Empty" }));

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(errorLabel, org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.errorLabel.text")); // NOI18N

        extField.setText(org.openide.util.NbBundle.getMessage(NewFileVisualPanel1.class, "NewFileVisualPanel1.extField.text")); // NOI18N
        extField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                extFieldKeyReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(customLabel)
                            .add(nameLabel)
                            .add(folderLabel)
                            .add(fileLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, fileField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                            .add(customCombo, 0, 299, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, folderField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                    .add(nameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                                .add(25, 25, 25)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(extField, 0, 0, Short.MAX_VALUE)
                                    .add(browseButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .add(errorLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameLabel)
                    .add(nameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(extField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(folderLabel)
                    .add(folderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(fileField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fileLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(customLabel)
                    .add(customCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 113, Short.MAX_VALUE)
                .add(errorLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nameFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_nameFieldKeyReleased
    {//GEN-HEADEREND:event_nameFieldKeyReleased
		updateFile();
    }//GEN-LAST:event_nameFieldKeyReleased

    private void folderFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_folderFieldKeyReleased
    {//GEN-HEADEREND:event_folderFieldKeyReleased
		updateFile();
    }//GEN-LAST:event_folderFieldKeyReleased

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
    {//GEN-HEADEREND:event_browseButtonActionPerformed
		int val = chooser.showDialog(this, "Select");
		if (val == JFileChooser.APPROVE_OPTION)
		{
			folderField.setText(chooser.getSelectedFile().getPath());
			updateFile();
		}
    }//GEN-LAST:event_browseButtonActionPerformed

    private void extFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_extFieldKeyReleased
    {//GEN-HEADEREND:event_extFieldKeyReleased
		updateFile();
    }//GEN-LAST:event_extFieldKeyReleased

	public boolean isValid()
	{
		if (folderField == null)
		{
			return false;
		}
		String loc = folderField.getText();
		String file = fileField.getText();
		String err = "";
		String name = nameField.getText();
		if (loc == null || loc.length() < 1)
		{
			err = "Please choose a folder.";
		} else
		{
			File locF = new File(loc);
			if (!locF.exists() || !locF.isDirectory() || !locF.canWrite())
			{
				err = "Folder must be an existing, writable directory.";
			} else
			{

				if (!checkName(name))
				{
					err = "Please enter a valid name.";
				} else if (new File(file).exists())
				{
					err = "This file already exists.";
				}
			}
		}
		//warnings
		if (name.indexOf(".") != -1)
		{
			errorLabel.setText("Warning: Not expecting a dot in Name.");
		}
		if (extField.getText().indexOf(".") != 0)
		{
			errorLabel.setText("Warning: File extension missing.");
		}

		errorLabel.setText(err);
		return err.length() == 0;
	}

	private void updateFile()
	{
		String dir = folderField.getText();
		dir += (dir.endsWith(File.separator) ? "" : File.separator) + nameField.getText() + extField.getText();
		fileField.setText(dir);
		// will recheck that it's valid
		parentWizard.fireChangeEvent();
	}

	private boolean checkName(String text)
	{
		return FanPodPanel1.VALID_NAME.matcher(text).matches();
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JComboBox customCombo;
    private javax.swing.JLabel customLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JTextField extField;
    private javax.swing.JTextField fileField;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField folderField;
    private javax.swing.JLabel folderLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    // End of variables declaration//GEN-END:variables

	String getFile()
	{
		return fileField.getText();
	}

	int getComboChoice()
	{
		return customCombo.getSelectedIndex();
	}

	String getFileName()
	{
		return nameField.getText();
	}
}

