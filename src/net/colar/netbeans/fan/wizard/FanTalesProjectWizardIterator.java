/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.colar.netbeans.fan.wizard;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.NoSuchElementException;
import java.util.Set;
import javax.swing.event.ChangeListener;
import net.colar.netbeans.fan.actions.FanExecution;
import net.colar.netbeans.fan.platform.FanPlatform;
import net.colar.netbeans.fan.project.FanProject;
import net.colar.netbeans.fan.project.FanProjectProperties;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

/**
 * Generated by NB "New wizard"
 * Iterator for new fan project/pod wizard
 * @author tcolar
 */
public final class FanTalesProjectWizardIterator implements WizardDescriptor.InstantiatingIterator
{

    private int index;
    private WizardDescriptor wizard;
    private WizardDescriptor.Panel[] panels;

    private WizardDescriptor.Panel[] getPanels()
    {
        if (panels == null)
        {
            panels = new WizardDescriptor.Panel[]
                    {
                        new FanTalesProjectWizardPanel1(System.getProperty("user.dir")),
                    };
        }
        return panels;
    }

    public FanTalesProjectWizardPanel1 getPanel()
    {
        return (FanTalesProjectWizardPanel1) panels[0];
    }

    /**
     * Called when "finish" is pressed
     * @return
     * @throws IOException
     */
    public Set instantiate() throws IOException
    {
        FanTalesProjectWizardPanel1 panel = getPanel();
        String location = panel.getProjectLocation();
        String projectName = panel.getProjectName();

        // Call "tales new" to create the project
        FanExecution fanExec = new FanExecution();
        fanExec.setDisplayName("Tales " + projectName);
        fanExec.setWorkingDirectory(location);

        FanPlatform.getInstance().buildFanCall(null, fanExec, false, "");

        fanExec.addCommandArg(FanPlatform.FAN_CLASS);
        fanExec.addCommandArg(FanPlatform.FAN_TALES_POD_NAME);
        fanExec.addCommandArg(location);
        fanExec.addCommandArg(FanPlatform.FAN_TALES_CREATE_CMD);
        fanExec.addCommandArg(projectName);
        fanExec.runAndWaitFor();

        // Return the prj so that it's open in IDE
        File pf = FileUtil.normalizeFile(new File(location + File.separator + projectName + File.separator));
        FileObject pfFo = FileUtil.toFileObject(pf);
        File fan = FileUtil.normalizeFile(new File(pf, "fan"));
        fan.mkdirs();
        File test = FileUtil.normalizeFile(new File(pf, "test"));
        test.mkdirs();
        //build.fan
        FileObject fanFo = FileUtil.toFileObject(fan);
        FileObject testFo = FileUtil.toFileObject(test);

        LinkedHashSet<FileObject> resultSet = new LinkedHashSet<FileObject>();
        resultSet.add(pfFo);
        resultSet.add(fanFo);
        resultSet.add(testFo);

        File parent = pf.getParentFile();
        // Always open top dir as a project:
        if (parent != null && parent.exists())
        {
            ProjectChooser.setProjectsFolder(parent);
        }

        FileUtil.refreshFor(pf);

        File prjDir = FileUtil.normalizeFile(new File(pf, "nbproject"));
        File prjFile = FileUtil.normalizeFile(new File(prjDir, "project.properties"));  
        prjDir.mkdirs();
        FileWriter writer = new FileWriter(prjFile);
        writer.append(FanProjectProperties.IS_TALES_PRJ+"=true\n");
        writer.close();
        
        return resultSet;
    }

    public static FanTalesProjectWizardIterator instance()
    {
        return new FanTalesProjectWizardIterator();
    }

    public void initialize(WizardDescriptor wizard)
    {
        this.wizard = wizard;
    }

    public void uninitialize(WizardDescriptor wizard)
    {
        panels = null;
    }

    public WizardDescriptor.Panel current()
    {
        return getPanels()[index];
    }

    public String name()
    {
        return index + 1 + ". from " + getPanels().length;
    }

    public boolean hasNext()
    {
        return index < getPanels().length - 1;
    }

    public boolean hasPrevious()
    {
        return index > 0;
    }

    public void nextPanel()
    {
        if (!hasNext())
        {
            throw new NoSuchElementException();
        }

        index++;
    }

    public void previousPanel()
    {
        if (!hasPrevious())
        {
            throw new NoSuchElementException();
        }

        index--;
    }

// If nothing unusual changes in the middle of the wizard, simply:
    public void addChangeListener(ChangeListener l)
    {
    }

    public void removeChangeListener(ChangeListener l)
    {
    }
}
