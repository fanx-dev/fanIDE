/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FanPodSourcesPanel.java
 *
 * Created on Apr 6, 2010, 1:45:45 PM
 */

package net.colar.netbeans.fan.wizard;

import java.io.File;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.tree.*;
import java.awt.*;
import java.util.Vector;
import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
import javax.swing.SwingWorker;
import javax.swing.JOptionPane;
/**
 *
 * @author bheadley
 */
public class FanPodSourcesPanel extends javax.swing.JDialog {

    /** Creates new form FanPodSourcesPanel */
    public FanPodSourcesPanel(java.awt.Frame parent, String title) {
        super(parent, title, true);
        initComponents();
    }
    public FanPodSourcesPanel(java.awt.Dialog parent, String title) {
        super(parent, title, true);
        initComponents();
    }
    public int showDialog(final File directory, final Set<String> selected)
        throws HeadlessException {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                returnValue = CANCEL_OPTION;
            }
        });
        returnValue = ERROR_OPTION;
        rootDirectory = directory;
        this.selected.addAll(selected);
        sourceField.setEditable(false);
        localInit();

        setVisible(true);

        dispose();
        return returnValue;
    }
    public Set<String> getSelected() {
        return selected;
    }
    private void localInit() {
        if (!rootDirectory.exists()) {
            rootDirectory.mkdirs();
        }
        sourceTreeModel = new DefaultTreeModel(addNodes(null,rootDirectory));
        sourceTree.setModel(sourceTreeModel);
        populateTextField();
    }
    private DefaultMutableTreeNode addNodes(DefaultMutableTreeNode curTop, File dir) {
        final String curPath = dir.getPath();
        final DefaultMutableTreeNode curDir = new DefaultMutableTreeNode(curPath);
        if (curTop != null) { // should only be null at root
            curTop.add(curDir);
        }
        final Vector<String> ol = new Vector<String>();
        final String[] tmp = dir.list();
        for (int i = 0; i < tmp.length; i++) {
            ol.addElement(tmp[i]);
        }
        Collections.sort(ol, String.CASE_INSENSITIVE_ORDER);
        for (String thisObject : ol) {
            final String newPath;
            if (curPath.equals(".")) {
                newPath = thisObject;
            }
            else {
                newPath = curPath + File.separator + thisObject;
            }
            final File f = new File(newPath);
            if ((f).isDirectory()) {
                addNodes(curDir, f);
            }
        }
        return curDir;
    }
    private void populateTextField() {
        final String root = rootDirectory.getPath();
        final StringBuilder sb = new StringBuilder();
        for (String str : selected) {
            str = str.replaceAll(root, "");
            if (str.startsWith("/")) {
                str = str.substring(1);
            }
            if (!str.endsWith("/")) {
                str += "/";
            }
            if (sb.length() != 0) {
                sb.append(", ");
            }
            sb.append("\"");
            sb.append(str);
            sb.append("\"");
        }
        sourceField.setText(sb.toString());
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectButton = new javax.swing.JButton();
        excludeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sourceTree = new javax.swing.JTree();
        sourceField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        finishButton = new javax.swing.JButton();
        createDirButton = new javax.swing.JButton();
        deleteDirButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        selectButton.setText(org.openide.util.NbBundle.getMessage(FanPodSourcesPanel.class, "FanPodSourcesPanel.selectButton.text")); // NOI18N
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        excludeButton.setText(org.openide.util.NbBundle.getMessage(FanPodSourcesPanel.class, "FanPodSourcesPanel.excludeButton.text")); // NOI18N
        excludeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excludeButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(sourceTree);

        sourceField.setText(org.openide.util.NbBundle.getMessage(FanPodSourcesPanel.class, "FanPodSourcesPanel.sourceField.text")); // NOI18N

        cancelButton.setText(org.openide.util.NbBundle.getMessage(FanPodSourcesPanel.class, "FanPodSourcesPanel.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        finishButton.setText(org.openide.util.NbBundle.getMessage(FanPodSourcesPanel.class, "FanPodSourcesPanel.finishButton.text")); // NOI18N
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        createDirButton.setText(org.openide.util.NbBundle.getMessage(FanPodSourcesPanel.class, "FanPodSourcesPanel.createDirButton.text")); // NOI18N
        createDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDirButtonActionPerformed(evt);
            }
        });

        deleteDirButton.setText(org.openide.util.NbBundle.getMessage(FanPodSourcesPanel.class, "FanPodSourcesPanel.deleteDirButton.text")); // NOI18N
        deleteDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDirButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(createDirButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteDirButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 136, Short.MAX_VALUE)
                        .add(selectButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(excludeButton))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(cancelButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 273, Short.MAX_VALUE)
                        .add(finishButton))
                    .add(sourceField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(excludeButton)
                    .add(selectButton)
                    .add(createDirButton)
                    .add(deleteDirButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 225, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(sourceField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelButton)
                    .add(finishButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        returnValue = APPROVE_OPTION;
        setVisible(false);
    }//GEN-LAST:event_finishButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        final SwingWorker<Integer,Integer> sw = new SwingWorker<Integer,Integer>() {
            public Integer doInBackground() {
                final DefaultMutableTreeNode node = (DefaultMutableTreeNode)sourceTree.getSelectionPath().getLastPathComponent();
                selected.add((String)node.getUserObject());
                populateTextField();
                return 0;
            }
        };
        sw.execute();
    }//GEN-LAST:event_selectButtonActionPerformed

    private void excludeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeButtonActionPerformed
        final SwingWorker<Integer,Integer> sw = new SwingWorker<Integer,Integer>() {
            public Integer doInBackground() {
                final DefaultMutableTreeNode node = (DefaultMutableTreeNode)sourceTree.getSelectionPath().getLastPathComponent();
                selected.remove((String)node.getUserObject());
                populateTextField();
                return 0;
            }
        };
        sw.execute();
    }//GEN-LAST:event_excludeButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        returnValue = CANCEL_OPTION;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void createDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDirButtonActionPerformed
        final SwingWorker<Integer,Integer> sw = new SwingWorker<Integer,Integer>() {
            public Integer doInBackground() {
                final DefaultMutableTreeNode node = (DefaultMutableTreeNode)sourceTree.getSelectionPath().getLastPathComponent();
                final String curDir = (String) node.getUserObject();
                final String newDir = JOptionPane.showInputDialog(FanPodSourcesPanel.this, "Enter directory to create", curDir + File.separator);
                if (newDir != null || !"".equals(newDir) || !curDir.equals(newDir)) {
                    final File f = new File(newDir);
                    f.mkdirs();
                    selected.add(newDir);
                    localInit();
                }
                return 0;
            }
        };
        sw.execute();
    }//GEN-LAST:event_createDirButtonActionPerformed

    private void deleteDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDirButtonActionPerformed
        SwingWorker<Integer,Integer> sw = new SwingWorker<Integer,Integer>() {
            public Integer doInBackground() {
                final TreePath currentSelection = sourceTree.getSelectionPath();
                if (currentSelection != null) {
                    final DefaultMutableTreeNode currentNode =
                            (DefaultMutableTreeNode) (currentSelection.getLastPathComponent());

                    final String directory = (String)currentNode.getUserObject();
                    final Object[] options = {"No", "Yes"};
                    final int n = JOptionPane.showOptionDialog(
                                FanPodSourcesPanel.this,
                                "Delete directory: \n" + directory + "?",
                                "Please Confirm",
                                JOptionPane.YES_NO_CANCEL_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                options,
                                options[0]);
                    if (n == 1) {
                        if (selected.contains(directory)) {
                            selected.remove(directory);
                        }
                        final File f = new File(directory);
                        if (!f.delete()) {
                            JOptionPane.showMessageDialog(FanPodSourcesPanel.this,
                                    "Directory is not empty!");
                            return 0;
                        }
                        localInit();
                    }
                }
                return 0;
            }
        };
        sw.execute();
    }//GEN-LAST:event_deleteDirButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createDirButton;
    private javax.swing.JButton deleteDirButton;
    private javax.swing.JButton excludeButton;
    private javax.swing.JButton finishButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton selectButton;
    private javax.swing.JTextField sourceField;
    private javax.swing.JTree sourceTree;
    // End of variables declaration//GEN-END:variables

    public static final int CANCEL_OPTION = 1;
    public static final int APPROVE_OPTION = 0;
    public static final int ERROR_OPTION = -1;
    private int returnValue = ERROR_OPTION;
    private Set<String> selected = new HashSet<String>();
    private DefaultTreeModel sourceTreeModel;
    private File rootDirectory;

}
