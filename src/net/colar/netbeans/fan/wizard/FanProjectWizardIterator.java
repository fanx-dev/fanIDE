/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.colar.netbeans.fan.wizard;

import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.NoSuchElementException;
import java.util.Set;
import javax.swing.event.ChangeListener;
import org.netbeans.api.project.ProjectManager;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

/**
 * Generated by NB "New wizard"
 * @author tcolar
 */
public final class FanProjectWizardIterator implements WizardDescriptor.InstantiatingIterator
{

    private int index;
    private WizardDescriptor wizard;
    private WizardDescriptor.Panel[] panels;
    /**
     * Initialize panels representing individual wizard's steps and sets
     * various properties for them influencing wizard appearance.
     */
    private WizardDescriptor.Panel packageChooserPanel;

    private WizardDescriptor.Panel[] getPanels()
    {
	if (panels == null)
	{
	    panels = new WizardDescriptor.Panel[]
		    {
			new FanProjectWizardPanel1(System.getProperty("user.dir")),
		    };
	}
	return panels;
    }

    public FanProjectWizardPanel1 getPanel()
    {
	return (FanProjectWizardPanel1) panels[0];
    }

    /**
     * Called when "finish" is pressed
     * @return
     * @throws IOException
     */
    public Set instantiate() throws IOException
    {
	FanProjectWizardPanel1 panel = getPanel();
	Set resultSet = new LinkedHashSet();
	String projFolder = panel.getProjectFolder();
	String projName = panel.getProjectName();
	// null if no pod creation requested
	String podName = panel.getPodName();
	String podFolder = panel.getPodFolder();

	File pf = FileUtil.normalizeFile(new File(projFolder));
	pf.mkdirs();
	File podf = FileUtil.normalizeFile(new File(podFolder));
	if (podName != null)
	{
	    podf.mkdirs();
	}

	FileObject dir = FileUtil.toFileObject(pf);
	FileObject pDir = FileUtil.toFileObject(podf);
	//dir.getFileSystem().runAtomicAction(new FSWriter(dir, projName, podName, pDir, resultSet));
	File parent = pf.getParentFile();
	// Always open top dir as a project:
	if (parent != null && parent.exists())
	{
	    ProjectChooser.setProjectsFolder(parent);
	}
	// Look for nested projects to open as well:
	resultSet.add(dir);
	Enumeration e = dir.getFolders(true);
	while (e.hasMoreElements())
	{
	    FileObject subfolder = (FileObject) e.nextElement();
	    if (ProjectManager.getDefault().isProject(subfolder))
	    {
		resultSet.add(subfolder);
	    }
	}

	return resultSet;
    }

    public static FanProjectWizardIterator instance()
    {
	return new FanProjectWizardIterator();
    }

    public void initialize(WizardDescriptor wizard)
    {
	this.wizard = wizard;
    }

    public void uninitialize(WizardDescriptor wizard)
    {
	panels = null;
    }

    public WizardDescriptor.Panel current()
    {
	return getPanels()[index];
    }

    public String name()
    {
	return index + 1 + ". from " + getPanels().length;
    }

    public boolean hasNext()
    {
	return index < getPanels().length - 1;
    }

    public boolean hasPrevious()
    {
	return index > 0;
    }

    public void nextPanel()
    {
	if (!hasNext())
	{
	    throw new NoSuchElementException();
	}
	index++;
    }

    public void previousPanel()
    {
	if (!hasPrevious())
	{
	    throw new NoSuchElementException();
	}
	index--;
    }

    // If nothing unusual changes in the middle of the wizard, simply:
    public void addChangeListener(ChangeListener l)
    {
    }

    public void removeChangeListener(ChangeListener l)
    {
    }

    // You could safely ignore this method. Is is here to keep steps which were
    // there before this wizard was instantiated. It should be better handled
    // by NetBeans Wizard API itself rather than needed to be implemented by a
    // client code.
    private String[] createSteps()
    {
	String[] beforeSteps = null;
	Object prop = wizard.getProperty("WizardPanel_contentData");
	if (prop != null && prop instanceof String[])
	{
	    beforeSteps = (String[]) prop;
	}

	if (beforeSteps == null)
	{
	    beforeSteps = new String[0];
	}

	String[] res = new String[(beforeSteps.length - 1) + panels.length];
	for (int i = 0; i < res.length; i++)
	{
	    if (i < (beforeSteps.length - 1))
	    {
		res[i] = beforeSteps[i];
	    } else
	    {
		res[i] = panels[i - beforeSteps.length + 1].getComponent().getName();
	    }
	}
	return res;
    }
}
