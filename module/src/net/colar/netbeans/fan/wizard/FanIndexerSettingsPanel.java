/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FanIndexerSettingsPanel.java
 *
 * Created on Apr 25, 2011, 9:41:47 AM
 */
package net.colar.netbeans.fan.wizard;

import net.colar.netbeans.fan.indexer.FanIndexer;
import net.colar.netbeans.fan.indexer.FanIndexerFactory;
import net.colar.netbeans.fan.platform.FanPlatformSettings;
import net.jot.prefs.JOTPreferences;
import org.openide.LifecycleManager;

/**
 *
 * @author thibaut
 */
public class FanIndexerSettingsPanel extends javax.swing.JPanel {

    FanIndexerSettingsController controller;

    /**
     * Creates new form FanIndexerSettingsPanel
     */
    public FanIndexerSettingsPanel(FanIndexerSettingsController controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        excludes = new javax.swing.JTextArea();
        excludesLbl = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        flushBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        javaIndexing = new javax.swing.JCheckBox();

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        excludes.setColumns(20);
        excludes.setLineWrap(true);
        excludes.setRows(5);
        excludes.setText(org.openide.util.NbBundle.getMessage(FanIndexerSettingsPanel.class, "FanIndexerSettingsPanel.excludes.text")); // NOI18N
        jScrollPane1.setViewportView(excludes);

        excludesLbl.setText(org.openide.util.NbBundle.getMessage(FanIndexerSettingsPanel.class, "FanIndexerSettingsPanel.excludesLbl.text")); // NOI18N

        updateBtn.setText(org.openide.util.NbBundle.getMessage(FanIndexerSettingsPanel.class, "FanIndexerSettingsPanel.updateBtn.text")); // NOI18N
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        flushBtn.setForeground(new java.awt.Color(255, 0, 0));
        flushBtn.setText(org.openide.util.NbBundle.getMessage(FanIndexerSettingsPanel.class, "FanIndexerSettingsPanel.flushBtn.text")); // NOI18N
        flushBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flushBtnActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(FanIndexerSettingsPanel.class, "FanIndexerSettingsPanel.jLabel1.text")); // NOI18N

        javaIndexing.setText(org.openide.util.NbBundle.getMessage(FanIndexerSettingsPanel.class, "FanIndexerSettingsPanel.javaIndexing.text")); // NOI18N
        javaIndexing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                javaIndexingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(excludesLbl)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(flushBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updateBtn)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(javaIndexing)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(excludesLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flushBtn)
                    .addComponent(updateBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(javaIndexing)
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
      FanPlatformSettings.getInstance().put(FanPlatformSettings.PREF_INDEXER_EXCLUDES,
              excludes.getText());
      FanIndexerFactory.getJavaIndexer().setExcludes(excludes.getText());
      FanIndexerFactory.getIndexer().indexAll(false);
  }//GEN-LAST:event_updateBtnActionPerformed

  private void flushBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flushBtnActionPerformed
      FanPlatformSettings.getInstance().put(FanPlatformSettings.PREF_INDEXER_EXCLUDES,
              excludes.getText());
      FanIndexerFactory.getJavaIndexer().setExcludes(excludes.getText());
      synchronized (this) {
          FanIndexer.whipeCache();
          LifecycleManager.getDefault().markForRestart();
          LifecycleManager.getDefault().exit();
      }
  }//GEN-LAST:event_flushBtnActionPerformed

    private void javaIndexingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_javaIndexingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_javaIndexingActionPerformed

    boolean getJavaIndexing() {
        return javaIndexing.isSelected();
    }

    void setJavaIndexing(boolean bool) {
        javaIndexing.setSelected(bool);
    }

    public String getExcludes() {
        return excludes.getText();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea excludes;
    private javax.swing.JLabel excludesLbl;
    private javax.swing.JButton flushBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox javaIndexing;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
